#include <SoftwareSerial.h>
#define Buffer_length 10
SoftwareSerial LCDserial(3, 2);
int salinity_power_pin = 8;
int solenoid_power_a = 12;
int solenoid_power_b = 13;
float salinitypercent;      // current salinity reading
float setpt = .01;          //setpoint
float gain = 0.75;
 int last_salinity_update = 0;

void setup() {
  Serial.begin(9600);
  LCDserial.begin(9600);
  pinMode (salinity_power_pin, OUTPUT);
  pinMode (solenoid_power_a, OUTPUT);
  pinMode (solenoid_power_b, OUTPUT);
  delay(500);
  LCDserial.write(254);
  LCDserial.write(1);
  LCDserial.write(254);
  //LCDserial.write(157);                 // LCD light on command, not working. 
  delay(500);
  LCD_Display();
 
}

void loop() {
  int salinity_input_pin = 2;
  int count = 15;
  float salinity_ave, salinity_stdev;
  sensor_reading_stats(salinity_power_pin, salinity_input_pin, count, &salinity_ave, &salinity_stdev,&salinitypercent);  // all major calculations done here
  
 
  
  if ( ( millis() - last_salinity_update ) > deadtime ) {
  deadtime();
  last_salinity_update = millis();
  }
  //Serial.println (salinity_ave);
  //Serial.println (",  ");
  //Serial.println (salinity_stdev);
  
}

void deadtime(){
float LCL, UCL;
float flowA =6.5;
float flowB = 5.3;
const float a = 0.00042;
const float b = 0.00865;
int deadtime = 3000;
int Di, Salt, on, off;
float new_set = setpt + 18;
float tol = a*exp(new_set*b);
float delta = setpt - tol;
LCL =setpt - delta;      // our three times the deviation
UCL =setpt + delta; 
float mass = gain_error();
flowA = mass/flowA;
flowA = flowA*1000;
flowB = mass/flowB;
flowB = flowB*1000;
 update_LCD(LCL,UCL,Di,Salt);
 

    if (salinitypercent>UCL ) {
        
        digitalWrite(solenoid_power_a,HIGH);
        delay(flowA);
        digitalWrite(solenoid_power_a,LOW);   
      
      Serial.print(digitalRead (solenoid_power_a));
    }
    
    if ( salinitypercent<LCL ) {
      digitalWrite(solenoid_power_b,HIGH);
      delay(flowB);
      digitalWrite(solenoid_power_b,LOW);
      
    }
    
    
  }

void sensor_reading_stats (int power_pin, int input_pin, int n, float *ave, float *stdev, float *salinitypercent) {
  int i, k;
  float reading [Buffer_length];
  k = min(n, Buffer_length);
  float dev, sum;
  const float a = 0.00042;
  const float b = 0.00865;
  unsigned long currentMillis = millis();
  unsigned long lastMillis = 0;
  const long interval = 100;
  int Pstate = LOW;

  if (Pstate == LOW) {    
    Pstate = HIGH;
  } else {
    Pstate = LOW;
  }

  for (i = 1 ; i <= k ; i++) {

    digitalWrite (power_pin, Pstate);  // power pin is continuesly on from Pstate if statment 
    delay (100);
    reading[i] = analogRead (input_pin);
    digitalWrite (power_pin, LOW);
    delay(10);
  }

  for (sum = 0.0, i = 1; i <= k; i++) {     // fifteen reading collected 
    sum += reading[i];
  }
  *ave = sum / float(n);                     // calculating average

  for (dev = 0.0, i = 1; i <= k; i++) {
    dev += pow(reading[i] - *ave, 2);
  }
  *stdev = sqrt (dev / float(k - 1));        // calculating standard deviation
  
  *salinitypercent = a*exp(*ave*b);          // the average is used to calculate the current salinity reading 
  
}

float gain_error (){
  float change,flow,massT,massA;
  float salttank = 0.1;
  float ditank = 0.0;
 
 if (salinitypercent > setpt){
 change =salinitypercent - setpt;
 float salfinal = change*gain;
 massA = massT*((1/1-flow)*(salinitypercent-salfinal)/(salinitypercent- salttank));
 
 }

 else if(salinitypercent < setpt){
  change = setpt - salinitypercent;
  float salfinal = change*gain;
  massA = massT*((1/1-flow)*(salinitypercent-salfinal)/(salinitypercent- ditank));
 }
 return massA;
}


void update_LCD(float LCL, float UCL,int Di,int Salt) {

  char LCD_string[10];

  dtostrf(LCL, 5, 2, LCD_string);
  LCDserial.write(254);
  LCDserial.write(192);
  LCDserial.write(LCD_string);

  
  LCDserial.write(254);
  LCDserial.write(212);
  LCDserial.write(Salt);

  dtostrf(setpt, 5, 2, LCD_string);
  LCDserial.write(254);
  LCDserial.write(199);
  LCDserial.write(LCD_string);

  dtostrf(salinitypercent, 5, 2, LCD_string);
  LCDserial.write(254);
  LCDserial.write(219);
  LCDserial.write(LCD_string);

  dtostrf(UCL, 5, 2, LCD_string);
  LCDserial.write(254);
  LCDserial.write(206);
  LCDserial.write(LCD_string);

  
  LCDserial.write(254);
  LCDserial.write(226);
  LCDserial.write(Di);
}

void LCD_Display() {
  LCDserial.write(254);
  LCDserial.write(129);
  LCDserial.write("LCL");

  LCDserial.write(254);
  LCDserial.write(135);
  LCDserial.write("SetPt");

  LCDserial.write(254);
  LCDserial.write(143);
  LCDserial.write("UCL");

  LCDserial.write(254);
  LCDserial.write(148);
  LCDserial.write("Salty");

  LCDserial.write(254);
  LCDserial.write(154);
  LCDserial.write("Current");

  LCDserial.write(254);
  LCDserial.write(163);
  LCDserial.write("DI");
}




